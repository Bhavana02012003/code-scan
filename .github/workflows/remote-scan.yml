name: Remote Code Scan

on:
  repository_dispatch:
    types: [run-scan]

permissions:
  contents: write
  actions: read

jobs:
  scan:
    runs-on: ubuntu-latest
    env:
      REPO_URL:  ${{ github.event.client_payload.repo_url }}
      OWNER:     ${{ github.event.client_payload.owner }}
      REPO:      ${{ github.event.client_payload.repo }}
      BRANCH:    ${{ github.event.client_payload.branch || 'main' }}
      TECH:      ${{ github.event.client_payload.technology }}
      CORR:      ${{ github.event.client_payload.correlation_id }}
      REPORT_PATH: ${{ github.event.client_payload.report_path }}

    steps:
      # -------------------------------------------------------
      # Checkout orchestrator repo
      # -------------------------------------------------------
      - name: Checkout orchestrator repo
        uses: actions/checkout@v4

      - name: Show inputs
        run: |
          echo "TECH=$TECH"
          echo "REPO_URL=$REPO_URL"
          echo "OWNER=$OWNER"
          echo "REPO=$REPO"
          echo "BRANCH=$BRANCH"
          echo "REPORT_PATH=$REPORT_PATH"

      # -------------------------------------------------------
      # Authenticate target repo
      # -------------------------------------------------------
      - name: Generate GitHub App token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.GH_APP_ID }}
          private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}
          installation_retrieval_mode: repository
          installation_retrieval_payload: ${{ env.OWNER }}/${{ env.REPO }}

      - name: Clone target repo
        run: |
          echo "Cloning repo: $OWNER/$REPO"
          git clone https://x-access-token:${{ steps.generate_token.outputs.token }}@github.com/${OWNER}/${REPO}.git target

      # -------------------------------------------------------
      # Overlay configs for language
      # -------------------------------------------------------
      - name: Overlay config pack (Scan + Fixers)
        run: |
          TECH_LOWER=$(echo "$TECH" | tr '[:upper:]' '[:lower:]')
          SRC="configs/$TECH_LOWER"
          if [ -d "$SRC" ]; then
            rsync -a --exclude 'tsconfig.template.json' "$SRC"/ target/
            if [ -f "$SRC/tsconfig.template.json" ] && git -C target ls-files '*.ts' '*.tsx' | grep -q .; then
              cp "$SRC/tsconfig.template.json" target/tsconfig.json
            fi
            echo "✅ Overlay complete for $TECH."
          else
            echo "⚠️ No overlay for $TECH (optional)."
          fi

      # -------------------------------------------------------
      # Toolchains
      # -------------------------------------------------------
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - uses: actions/setup-dotnet@v4
        if: ${{ env.TECH == 'DotNet' }}
        with:
          dotnet-version: '8.0.x'

      # =======================================================
      # Salesforce PMD scan + auto-fix
      # =======================================================
      - name: Salesforce • Setup Java
        if: ${{ env.TECH == 'Salesforce' }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Salesforce • Download PMD
        if: ${{ env.TECH == 'Salesforce' }}
        run: |
          PMD_VER=6.55.0
          curl -L "https://github.com/pmd/pmd/releases/download/pmd_releases/${PMD_VER}/pmd-bin-${PMD_VER}.zip" -o pmd.zip
          sudo apt-get update && sudo apt-get install -y unzip
          unzip -q pmd.zip
          mv "pmd-bin-${PMD_VER}" pmd
          chmod +x pmd/bin/run.sh

      - name: Salesforce • PMD scan
        if: ${{ env.TECH == 'Salesforce' }}
        working-directory: target
        run: |
          mkdir -p ../out
          FA=$(find . -type d -name "force-app" | head -n 1); [ -z "$FA" ] && FA="."
          ../pmd/bin/run.sh pmd -d "$FA" -f csv \
            -R category/apex/bestpractices.xml,category/apex/design.xml,category/apex/errorprone.xml,category/apex/performance.xml,category/apex/security.xml \
            > ../out/pmd.csv || true
          [ -s ../out/pmd.csv ] || echo "Problem,Package,File,Priority,Line,Description,Rule set,Rule" > ../out/pmd.csv

      - name: Salesforce • Quick Fix (Spotless + Cleanthat)
        if: ${{ env.TECH == 'Salesforce' }}
        working-directory: target
        run: |
          git checkout -b auto-fix-${{ env.CORR }}
          mvn -f pom.xml spotless:apply || true
          mvn -f pom.xml cleanthat:apply || true
          git diff > ../out/fixes.patch

      # =======================================================
      # Java PMD scan + auto-fix
      # =======================================================
      - name: Java • Setup Java
        if: ${{ env.TECH == 'Java' }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Java • Download PMD
        if: ${{ env.TECH == 'Java' }}
        run: |
          PMD_VER=6.55.0
          curl -L "https://github.com/pmd/pmd/releases/download/pmd_releases/${PMD_VER}/pmd-bin-${PMD_VER}.zip" -o pmd-java.zip
          sudo apt-get update && sudo apt-get install -y unzip
          unzip -q pmd-java.zip
          mv "pmd-bin-${PMD_VER}" pmd_java
          chmod +x pmd_java/bin/run.sh

      - name: Java • PMD scan
        if: ${{ env.TECH == 'Java' }}
        working-directory: target
        run: |
          mkdir -p ../out
          ../pmd_java/bin/run.sh pmd -d "." -f csv \
            -R category/java/bestpractices.xml,category/java/design.xml,category/java/errorprone.xml,category/java/performance.xml,category/java/security.xml \
            > ../out/pmd_java.csv || true
          [ -s ../out/pmd_java.csv ] || echo "Problem,Package,File,Priority,Line,Description,Rule set,Rule" > ../out/pmd_java.csv

      - name: Java • Quick Fix (Spotless + Cleanthat)
        if: ${{ env.TECH == 'Java' }}
        working-directory: target
        run: |
          git checkout -b auto-fix-${{ env.CORR }}
          mvn -f pom.xml spotless:apply || true
          mvn -f pom.xml cleanthat:apply || true
          git diff > ../out/fixes.patch

      # =======================================================
      # React ESLint scan + suggestions
      # =======================================================
      - name: React • Install deps
        if: ${{ env.TECH == 'React' }}
        working-directory: target
        run: npm ci || npm install

      - name: React • ESLint scan + fix suggestions
        if: ${{ env.TECH == 'React' }}
        working-directory: target
        run: |
          mkdir -p ../out
          npx eslint . --ext .js,.jsx,.ts,.tsx -f json -o ../out/eslint.json || true
          npx eslint . --ext .js,.jsx,.ts,.tsx --fix-dry-run -f json -o ../out/eslint-fixes.json || true

      # =======================================================
      # Python scan + autopep8
      # =======================================================
      - name: Python • Install linters
        if: ${{ env.TECH == 'Python' }}
        run: |
          python -m pip install --upgrade pip
          pip install bandit pylint flake8 flake8-json autopep8

      - name: Python • Scan + fix suggestion
        if: ${{ env.TECH == 'Python' }}
        working-directory: target
        run: |
          mkdir -p ../out
          bandit -r . -f json -o ../out/bandit.json || true
          find . -name "*.py" > ../out/files.txt
          if [ -s ../out/files.txt ]; then
            pylint $(cat ../out/files.txt) --output-format=json > ../out/pylint.json || true
          else
            echo "[]" > ../out/pylint.json
          fi
          flake8 . --format=json --output-file=../out/flake8.json || true
          autopep8 . --diff > ../out/fixes.patch || true

      # =======================================================
      # Convert patches and ESLint suggestions to fixes.json
      # =======================================================
      - name: Convert patch to fixes.json
        if: always()
        run: |
          python3 scripts/convert_patch_to_json.py out/fixes.patch out/fixes.json || echo "{}" > out/fixes.json

      - uses: actions/upload-artifact@v4
        with:
          name: fixes-${{ env.CORR }}
          path: out/fixes.json

      # =======================================================
      # Normalize to CSV (violations)
      # =======================================================
      - name: Normalize to CSV
        run: |
          python3 scripts/normalize.py out out/normalized.csv

      # -------------------------------------------------------
      # Debug: List out folder
      # -------------------------------------------------------
      - name: "Debug: list files"
        run: |
          ls -lh out || echo "No out folder"
          echo "-----"
          find out -type f -exec sh -c 'echo ">>> {}"; head -20 "{}"' \;

      # =======================================================
      # Commit report into orchestrator
      # =======================================================
      - name: Commit report into orchestrator
        run: |
          mkdir -p "$(dirname "$REPORT_PATH")"
          cp out/normalized.csv "$REPORT_PATH"
          git config user.name "orchestrator-bot"
          git config user.email "orchestrator@example.com"
          git add "$REPORT_PATH"
          git commit -m "Scan report: $OWNER/$REPO ($TECH) • $CORR" || echo "Nothing to commit"
          git push

      - uses: actions/upload-artifact@v4
        with:
          name: report-${{ env.CORR }}
          path: out/normalized.csv
