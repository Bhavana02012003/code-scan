name: Remote Code Scan

on:
  repository_dispatch:
    types: [run-scan]

permissions:
  contents: write
  actions: read

jobs:
  scan:
    runs-on: ubuntu-latest
    env:
      REPO_URL:  ${{ github.event.client_payload.repo_url }}
      OWNER:     ${{ github.event.client_payload.owner }}
      REPO:      ${{ github.event.client_payload.repo }}
      BRANCH:    ${{ github.event.client_payload.branch || 'main' }}
      TECH:      ${{ github.event.client_payload.technology }}
      CORR:      ${{ github.event.client_payload.correlation_id }}
      REPORT_PATH: ${{ github.event.client_payload.report_path }}

    steps:
      - name: Checkout orchestrator repos
        uses: actions/checkout@v4

      - name: Show inputs
        run: |
          echo "TECH=$TECH"
          echo "REPO_URL=$REPO_URL"
          echo "REPORT_PATH=$REPORT_PATH"
      - name: Detect GH_PAT
        id: has-pat
        shell: bash
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          if [ -n "${GH_PAT}" ]; then
            echo "USE_PAT=true" >> "$GITHUB_ENV"
          else
            echo "USE_PAT=false" >> "$GITHUB_ENV"
          fi
      - name: Clone target repository (public)
        if: ${{ env.USE_PAT == 'false' }}
        run: git clone --depth 1 --branch "$BRANCH" "$REPO_URL" target

      - name: Clone target repository (private via GH_PAT)
        if: ${{ env.USE_PAT == 'true' }}
        run: |
          URL_AUTH="https://${{ secrets.GH_PAT }}@${REPO_URL#https://}"
          git clone --depth 1 --branch "$BRANCH" "$URL_AUTH" target
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - uses: actions/setup-dotnet@v4
        if: ${{ env.TECH == 'DotNet' }}
        with:
          dotnet-version: '8.0.x'

      - uses: actions/setup-java@v4
        if: ${{ env.TECH == 'Salesforce' || env.TECH == 'Java' }}
        with:
          distribution: 'temurin'
          java-version: '17'

      # ===== SALESFORCE =====
      - name: Salesforce • Download PMD
        if: ${{ env.TECH == 'Salesforce' }}
        run: |
          PMD_VER=6.55.0
          curl -LO https://github.com/pmd/pmd/releases/download/pmd_releases/${PMD_VER}/pmd-bin-${PMD_VER}.zip
          unzip -q pmd-bin-${PMD_VER}.zip
          mv pmd-bin-${PMD_VER} pmd
          chmod +x pmd/bin/run.sh
      - name: Salesforce • Run PMD
        if: ${{ env.TECH == 'Salesforce' }}
        working-directory: target
        run: |
          mkdir -p ../out
          FA=$(find . -type d -name "force-app" | head -n 1)
          if [ -z "$FA" ]; then FA="."; fi
          ../pmd/bin/run.sh pmd \
            -d "$FA" \
            -f csv \
            -R category/apex/bestpractices.xml,category/apex/design.xml,category/apex/errorprone.xml,category/apex/performance.xml,category/apex/security.xml \
            > ../out/pmd.csv || true
      # ===== JAVA =====
      - name: Java • Download PMD
        if: ${{ env.TECH == 'Java' }}
        run: |
          PMD_VER=6.55.0
          curl -LO https://github.com/pmd/pmd/releases/download/pmd_releases/${PMD_VER}/pmd-bin-${PMD_VER}.zip
          unzip -q pmd-bin-${PMD_VER}.zip
          mv pmd-bin-${PMD_VER} pmd-java
          chmod +x pmd-java/bin/run.sh
      - name: Java • Run PMD
        if: ${{ env.TECH == 'Java' }}
        working-directory: target
        run: |
          mkdir -p ../out
          JAVA_SRC=$(find . -type d \( -name "src" -o -name "java" \) | head -n 1)
          if [ -z "$JAVA_SRC" ]; then JAVA_SRC="."; fi
          ../pmd-java/bin/run.sh pmd \
            -d "$JAVA_SRC" \
            -f csv \
            -R category/java/bestpractices.xml,category/java/codestyle.xml,category/java/errorprone.xml,category/java/performance.xml,category/java/security.xml \
            > ../out/java-pmd.csv || true
      # ===== DOTNET =====
      - name: .NET • Scan & Build
        if: ${{ env.TECH == 'DotNet' }}
        working-directory: target
        run: |
          TARGET=$( (ls *.sln 2>/dev/null || true; ls *.csproj 2>/dev/null || true) | head -n 1 )
          if [ -z "$TARGET" ]; then TARGET=$(git ls-files "*.sln" "*.csproj" | head -n 1); fi
          dotnet restore "$TARGET" || true
          dotnet tool install -g dotnet-format
          export PATH="$HOME/.dotnet/tools:$PATH"
          mkdir -p ../out
          dotnet format "$TARGET" --verify-no-changes --report ../out/dotnet-format.json --report-format json || true
          dotnet build "$TARGET" -v:normal > ../out/build_output.txt || true
      # ===== PYTHON =====
      - name: Python • Install Linters
        if: ${{ env.TECH == 'Python' }}
        run: |
          pip install bandit pylint flake8 flake8-json
      - name: Python • Run Linters
        if: ${{ env.TECH == 'Python' }}
        working-directory: target
        run: |
          mkdir -p ../out
          bandit -r . -f json -o ../out/bandit.json || true
          find . -name "*.py" > ../out/files.txt
          if [ -s ../out/files.txt ]; then
            pylint $(cat ../out/files.txt) --output-format=json > ../out/pylint.json || true
          fi
          flake8 . --format=json --output-file=../out/flake8.json || true
      # ===== REACT =====
      - name: React • Install Dependencies
        if: ${{ env.TECH == 'React' }}
        working-directory: target
        run: npm ci || npm install

      - name: React • Run Linters
        if: ${{ env.TECH == 'React' }}
        working-directory: target
        run: |
          mkdir -p ../out
          npx eslint . --ext .js,.jsx,.ts,.tsx -f json -o ../out/eslint.json || true
          if find . -name "tsconfig*.json" | grep -q .; then
            npx tsc --noEmit > ../out/tsc-output.txt 2>&1 || true
          fi
          npm audit --json > ../out/audit.json || true
      # ===== NORMALIZE ALL =====
      - name: Normalize Reports to CSV
        run: |
          python - << 'EOF'
          import os, csv, json
          rows = [["Tool", "File", "Line", "Severity", "Rule", "Message"]]
          def add(tool, f, l, s, r, m): rows.append([tool, f or "", str(l or ""), str(s or ""), str(r or ""), (m or "").strip()])
          os.makedirs("out", exist_ok=True)
          def read_csv(file, tool):
              if os.path.exists(file) and os.path.getsize(file) > 0:
                  with open(file, newline="", encoding="utf-8") as f:
                      for row in csv.DictReader(f):
                          add(tool, row.get("File"), row.get("Line"), row.get("Priority"), row.get("Rule"), row.get("Description"))
          read_csv("out/pmd.csv", "PMD")
          read_csv("out/java-pmd.csv", "PMD(Java)")
          with open("out/normalized.csv", "w", newline="", encoding="utf-8") as f:
              csv.writer(f).writerows(rows)
          print("Wrote", len(rows) - 1, "rows to normalized.csv")
          EOF
      - name: Commit report into orchestrator
        run: |
          mkdir -p "$(dirname "$REPORT_PATH")"
          cp out/normalized.csv "$REPORT_PATH"
          git config user.name "orchestrator-bot"
          git config user.email "orchestrator@example.com"
          git add "$REPORT_PATH"
          git commit -m "Scan report: $OWNER/$REPO ($TECH) • $CORR" || echo "Nothing to commit"
          git push
      - uses: actions/upload-artifact@v4
        with:
          name: report-${{ env.CORR }}
          path: out/normalized.csv